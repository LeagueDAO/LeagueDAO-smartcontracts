// SPDX-License-Identifier: MIT
pragma solidity 0.8.6;

import "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol";
import "@openzeppelin/contracts/token/ERC20/IERC20.sol";
import "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol";
import "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol";
import "@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol";
import "../interfaces/IImpulseMultiStrategyQuick.sol";

contract ImpulseStakingMultiQuickSwap is AccessControlUpgradeable, ReentrancyGuardUpgradeable {
    using SafeERC20 for IERC20;

    /**********
     * DATA INTERFACE
     **********/

    // Info of each user.
    struct UserInfo {
        uint256 shares; // How many Shares the user has.
        uint256 depositInWant; // How many ASSET tokens the user has provided.
        uint256[] rewardsDebts; // Order like in AssetInfo rewardsTokens
        // Reward debt. See explanation below.
        //
        // We do some fancy math here. Basically, any point in time, the amount of rewards
        // entitled to a user but is pending to be distributed is:
        //
        //   pending reward = (user.shares * asset.accumulatedPerShare) - user.rewardDebt
        //
        // Whenever a user deposits or withdraws ASSET tokensens to a asset. Here's what happens:
        //   1. The assets `accumulatedPerShare` (and `lastRewardBlock`) gets updated.
        //   2. User receives the pending reward sent to the address.
        //   3. User's `amount` gets updated.
        //   4. User's `rewardDebt` gets updated.
    }
    // Info of each asset.
    struct PoolInfo {
        address[] assetToken; // Addresses of LP tokens contracts.
        uint256 lastRewardBlock; // Last block number that DHVs distribution occurs.
        uint256[] accumulatedPerShare; // Accumulated token per share, times token decimals. See below.
        address[] rewardsTokens; // Must be constant.
        uint256[] rewardsPerBlock; // Tokens to distribute per block.
        uint256[] accuracy; // Tokens accuracy.
        uint256 poolSupply; // Total amount of deposits by users.
        bool paused; // Flag that displays the pool on pause or not.
        address strategy; // Strategy address that will auto compound want tokens.
    }

    /**********
     * STORAGE
     **********/

    /// @notice pid => pool info
    mapping(uint256 => PoolInfo) public poolInfo;
    /// @notice pid => user address => UserInfo
    mapping(uint256 => mapping(address => UserInfo)) public userInfo;

    address public treasury;
    /// @notice pid => comission
    /// 100% = 10000, 1% = 100, 0.3% = 30
    mapping(uint256 => uint256) public commission;
    uint256 public constant PERCENT_DIVIDER = 10000;

    /// Shows withdraw in shares
    event Withdraw(address indexed user, uint256 indexed poolId, uint256 amount, uint256 totalAmount);
    /// Shows withdraw in tokens
    event WithdrawUnderlying(address indexed user, uint256 indexed poolId, address underlying, uint256 amount);

    event Deposit(address indexed user, uint256 indexed poolId, uint256 amount);
    event ClaimRewards(address indexed user, uint256 indexed poolId, address[] tokens, uint256[] amounts);
    event UpdateCommission(uint256 pid, uint256 commission);

    /**********
     * MODIFIERS
     **********/

    modifier hasPool(uint256 _pid) {
        require(poolExist(_pid), "Pool not exist");
        _;
    }

    modifier poolRunning(uint256 _pid) {
        require(!poolInfo[_pid].paused, "Pool on pause");
        _;
    }

    /**********
     * ADMIN INTERFACE
     **********/

    function initialize() public virtual initializer {
        _setupRole(DEFAULT_ADMIN_ROLE, _msgSender());
        __ReentrancyGuard_init();
    }

    /// @notice Add staking pool to the chief contract.
    /// @param _pid New pool id.
    /// @param _assetAddresses Staked tokens.
    /// @param _rewardsTokens Addresses of the reward tokens.
    /// @param _rewardsPerBlock Amount of rewards distributed to the pool every block.
    function addPool(
        uint256 _pid,
        address[] calldata _assetAddresses,
        address[] calldata _rewardsTokens,
        uint256[] calldata _rewardsPerBlock,
        address _strategy
    ) external onlyRole(DEFAULT_ADMIN_ROLE) {
        require(!poolExist(_pid), "Pool exist");

        for (uint256 i = 0; i < _assetAddresses.length; i++) {
            require(_assetAddresses[i] != address(0), "Wrong asset address");
        }

        require(_strategy != address(0), "Wrong strategy address");
        require(_rewardsTokens.length == _rewardsPerBlock.length, "Wrong rewards tokens");

        poolInfo[_pid] = PoolInfo({
            assetToken: _assetAddresses,
            lastRewardBlock: block.number,
            accumulatedPerShare: new uint256[](_rewardsTokens.length),
            rewardsTokens: _rewardsTokens,
            accuracy: new uint256[](_rewardsTokens.length),
            rewardsPerBlock: _rewardsPerBlock,
            poolSupply: 0,
            paused: false,
            strategy: _strategy
        });
        for (uint256 i = 0; i < _rewardsTokens.length; i++) {
            poolInfo[_pid].accuracy[i] = 10**IERC20Metadata(_rewardsTokens[i]).decimals();
        }
    }

    /// @notice Add reward token to pool's rewards tokens.
    /// @param _pid Id to which pool want to add new reward token.
    /// @param _rewardsPerBlock Amount of rewards distributed to the pool every block.
    /// @param _withUpdate Update current rewards before changing rewardsTokens of pool.
    function addRewardToken(
        uint256 _pid,
        address _newRewardToken,
        uint256 _rewardsPerBlock,
        bool _withUpdate
    ) external onlyRole(DEFAULT_ADMIN_ROLE) hasPool(_pid) {
        if (_withUpdate) {
            updatePool(_pid);
        }
        PoolInfo storage pool = poolInfo[_pid];

        pool.rewardsTokens.push(_newRewardToken);
        pool.rewardsPerBlock.push(_rewardsPerBlock);

        require(pool.rewardsTokens.length == pool.rewardsPerBlock.length, "Wrong rewards tokens");

        pool.accuracy.push(10**IERC20Metadata(_newRewardToken).decimals());
        pool.accumulatedPerShare.push(0);
    }

    /// @notice Update rewards distribution speed.
    /// @param _pid New pool id.
    /// @param _rewardsPerBlock Amount of rewards distributed to the pool every block.
    /// @param _withUpdate Update current rewards before changing the coefficients.
    function updatePoolSettings(
        uint256 _pid,
        uint256[] calldata _rewardsPerBlock,
        bool _withUpdate
    ) external onlyRole(DEFAULT_ADMIN_ROLE) hasPool(_pid) {
        if (_withUpdate) {
            updatePool(_pid);
        }

        require(poolInfo[_pid].rewardsTokens.length == _rewardsPerBlock.length, "Wrong rewards tokens");
        poolInfo[_pid].rewardsPerBlock = _rewardsPerBlock;
    }

    /// @notice Pauses/unpauses the pool.
    /// @param _pid Pool's id.
    /// @param _paused True to pause, False to unpause.
    function setOnPause(uint256 _pid, bool _paused) external hasPool(_pid) onlyRole(DEFAULT_ADMIN_ROLE) {
        poolInfo[_pid].paused = _paused;
    }

    /// @notice Admin method for set treasury address.
    /// @param _treasury New treasury address.
    function setTreasury(address _treasury) external onlyRole(DEFAULT_ADMIN_ROLE) {
        treasury = _treasury;
    }

    /// @notice Admin method for set treasury address.
    /// @param _pid PID of the pool.
    /// @param _commission New commission, 0 - without commission.
    function setCommission(uint256 _pid, uint256 _commission) external hasPool(_pid) onlyRole(DEFAULT_ADMIN_ROLE) {
        require(_commission <= PERCENT_DIVIDER, "Incorrect commission");
        commission[_pid] = _commission;
        emit UpdateCommission(_pid, _commission);
    }

    /**********
     * USER INTERFACE
     **********/

    /// @notice Update reward variables of the given asset to be up-to-date.
    /// @param _pid Pool's id.
    function updatePool(uint256 _pid) public hasPool(_pid) {
        PoolInfo storage pool = poolInfo[_pid];
        if (block.number <= pool.lastRewardBlock) {
            return;
        }
        if (pool.poolSupply == 0) {
            pool.lastRewardBlock = block.number;
            return;
        }
        uint256 blocks = block.number - pool.lastRewardBlock;
        for (uint256 i = 0; i < pool.rewardsTokens.length; i++) {
            uint256 unaccountedReward = pool.rewardsPerBlock[i] * blocks;
            pool.accumulatedPerShare[i] = pool.accumulatedPerShare[i] + (unaccountedReward * pool.accuracy[i]) / pool.poolSupply;
        }
        pool.lastRewardBlock = block.number;
    }

    /// @notice Deposit (stake) ASSET tokens.
    /// @param _pid Pool's id.
    /// @param _amounts Amounts in underlyings to stake.
    /// @dev Amounts must be in this order: USDC, USDT, DAI, MAI.
    function depositInUnderlying(uint256 _pid, uint256[] calldata _amounts) public virtual nonReentrant hasPool(_pid) poolRunning(_pid) {
        updatePool(_pid);

        PoolInfo memory pool = poolInfo[_pid];
        UserInfo storage user = userInfo[_pid][_msgSender()];

        IImpulseMultiStrategyQuick strategy = IImpulseMultiStrategyQuick(pool.strategy);

        address[] memory listUnderlying = strategy.listUnderlyings();
        require(_amounts.length == listUnderlying.length, "wrong amounts");

        if (user.rewardsDebts.length == 0 && pool.rewardsTokens.length > 0) {
            user.rewardsDebts = new uint256[](pool.rewardsTokens.length);
        } else if (user.rewardsDebts.length < pool.rewardsTokens.length) {
            uint256 diff = pool.rewardsTokens.length - user.rewardsDebts.length;
            for (uint256 i = 0; i < diff; i++) {
                user.rewardsDebts.push(0);
            }
        }

        uint256 poolAmountBefore = user.shares;
        for (uint256 u = 0; u < listUnderlying.length; u++) {
            address asset = listUnderlying[u];
            if (_amounts[u] != 0) {
                IERC20(asset).safeApprove(pool.strategy, 0);
                IERC20(asset).safeApprove(pool.strategy, _amounts[u]);
                IERC20(asset).safeTransferFrom(_msgSender(), address(this), _amounts[u]);
            }
        }

        uint256 sharesAmount = strategy.depositInUnderlying(_amounts);
        user.shares += sharesAmount;
        uint256 wantAmt = ((user.shares * strategy.wantLockedTotal()) / strategy.sharesTotal());
        user.depositInWant += wantAmt;

        for (uint256 i = 0; i < pool.rewardsTokens.length; i++) {
            _updateUserInfo(pool, user, i, poolAmountBefore);
        }
        poolInfo[_pid].poolSupply += sharesAmount;

        emit Deposit(_msgSender(), _pid, wantAmt);
    }

    /// @notice Withdraw shares amount from staking protocol in one of the underlying tokens.
    /// @param _pid PID of the pool.
    /// @param _wantAmt Amount of shares to withdraw.
    /// @param _underlying Token to withdraw in.
    function withdrawInOneUnderlying(
        uint256 _pid,
        uint256 _wantAmt,
        address _underlying
    ) public virtual nonReentrant hasPool(_pid) poolRunning(_pid) {
        updatePool(_pid);
        PoolInfo memory pool = poolInfo[_pid];
        UserInfo storage user = userInfo[_pid][_msgSender()];

        if (user.rewardsDebts.length == 0 && pool.rewardsTokens.length > 0) {
            user.rewardsDebts = new uint256[](pool.rewardsTokens.length);
        } else if (user.rewardsDebts.length < pool.rewardsTokens.length) {
            uint256 diff = pool.rewardsTokens.length - user.rewardsDebts.length;
            for (uint256 i = 0; i < diff; i++) {
                user.rewardsDebts.push(0);
            }
        }

        require(user.shares > 0 && user.depositInWant >= _wantAmt, "withdraw: wrong amount");
        uint256 poolAmountBefore = user.shares;
        uint256 sharesAmount = _withdrawFromStrategy(_pid, _wantAmt, _underlying);

        user.shares -= sharesAmount;
        user.depositInWant -= _wantAmt;

        (uint256 underlyingBalance, uint256 withdrawCommissions) = _transferCommission(_pid, _underlying);

        IERC20(_underlying).safeTransfer(_msgSender(), underlyingBalance - withdrawCommissions);

        for (uint256 i = 0; i < pool.rewardsTokens.length; i++) {
            _updateUserInfo(pool, user, i, poolAmountBefore);
        }

        poolInfo[_pid].poolSupply -= sharesAmount;

        emit WithdrawUnderlying(_msgSender(), _pid, _underlying, underlyingBalance);
    }

    function _withdrawFromStrategy(
        uint256 _pid,
        uint256 _wantAmt,
        address _underlying
    ) internal returns (uint256 sharesAmount) {
        UserInfo storage user = userInfo[_pid][_msgSender()];
        IImpulseMultiStrategyQuick strategy = IImpulseMultiStrategyQuick(poolInfo[_pid].strategy);

        uint256 userTotalAmount = ((user.shares * strategy.wantLockedTotal()) / strategy.sharesTotal());
        uint256 withdrawTotalAmount = (_wantAmt * userTotalAmount) / user.depositInWant;

        sharesAmount = strategy.withdrawInOneUnderlying(withdrawTotalAmount, _underlying);

        emit Withdraw(_msgSender(), _pid, _wantAmt, withdrawTotalAmount);
    }

    /// @notice Internal function to calculate and withdraw the commission.
    /// @param _pid PID of the pool.
    /// @param _underlying Token to calculate comission in.
    /// @return underlyingBalance Initial amount of the token to calculate from.
    /// @return withdrawCommissions Commission amount in the same token.
    function _transferCommission(uint256 _pid, address _underlying) internal returns (uint256 underlyingBalance, uint256 withdrawCommissions) {
        underlyingBalance = IERC20(_underlying).balanceOf(address(this));
        if (treasury != address(0) && commission[_pid] > 0) {
            withdrawCommissions = (underlyingBalance * commission[_pid]) / PERCENT_DIVIDER;
            IERC20(_underlying).safeTransfer(treasury, withdrawCommissions);
        }
    }

    /// @notice Update pool and claim pending rewards for the user.
    /// @param _pid Pool's id.
    function claimRewards(uint256 _pid) external nonReentrant poolRunning(_pid) {
        _claimRewards(_pid, _msgSender());
    }

    /// @notice Transfer pending rewards for the user.
    /// @dev Update user's info about rewards.
    function _updateUserInfo(
        PoolInfo memory pool,
        UserInfo storage user,
        uint256 _tokenNum,
        uint256 _amount
    ) internal returns (uint256 pending) {
        uint256 accumulatedPerShare = pool.accumulatedPerShare[_tokenNum];

        if (user.rewardsDebts.length < pool.rewardsTokens.length) {
            user.rewardsDebts.push(0);
        }

        if (_amount > 0) {
            pending = (_amount * accumulatedPerShare) / pool.accuracy[_tokenNum] - user.rewardsDebts[_tokenNum];
            if (pending > 0) {
                IERC20(pool.rewardsTokens[_tokenNum]).safeTransfer(_msgSender(), pending);
            }
        }
        user.rewardsDebts[_tokenNum] = (user.shares * accumulatedPerShare) / pool.accuracy[_tokenNum];
    }

    /**********
     * VIEW INTERFACE
     **********/

    /// @notice Getter for reward token address.
    /// @param _pid Pool's id.
    /// @param _index Index of the reward token.
    /// @return reward token address.
    function rewardToken(uint256 _pid, uint256 _index) external view returns (address) {
        PoolInfo memory pool = poolInfo[_pid];
        return pool.rewardsTokens[_index];
    }

    /// @notice Getter for reward token rate.
    /// @param _pid Pool's id.
    /// @param _index Index of the reward token.
    /// @return reward token rate.
    function rewardTokenRate(uint256 _pid, uint256 _index) external view returns (uint256) {
        PoolInfo memory pool = poolInfo[_pid];
        return pool.rewardsPerBlock[_index];
    }

    /// @notice Getter for reward tokens addresses.
    /// @param _pid Pool's id.
    /// @return reward token addresses.
    function rewardTokens(uint256 _pid) external view returns (address[] memory) {
        return poolInfo[_pid].rewardsTokens;
    }

    /// @notice Getter for reward token rates array.
    /// @param _pid Pool's id.
    /// @return reward token rates.
    function rewardRates(uint256 _pid) external view returns (uint256[] memory) {
        return poolInfo[_pid].rewardsPerBlock;
    }

    /// @notice Getter for reward tokens count in pool.
    /// @param _pid Pool's id.
    /// @return reward tokens counts.
    function rewardTokensLength(uint256 _pid) external view returns (uint256) {
        return poolInfo[_pid].rewardsTokens.length;
    }

    /// @notice View function to see pending DHVs on frontend.
    /// @param _pid Pool's id
    /// @param _user Address to check
    /// @return amounts Amounts of reward tokens available to claim
    function pendingRewards(uint256 _pid, address _user) external view hasPool(_pid) returns (uint256[] memory amounts) {
        PoolInfo memory pool = poolInfo[_pid];
        UserInfo memory user = userInfo[_pid][_user];

        amounts = new uint256[](pool.rewardsTokens.length);
        for (uint256 i = 0; i < pool.rewardsTokens.length; i++) {
            uint256 accumulatedPerShare = pool.accumulatedPerShare[i];

            if (block.number > pool.lastRewardBlock && pool.poolSupply != 0) {
                uint256 blocks = block.number - pool.lastRewardBlock;
                uint256 unaccountedReward = pool.rewardsPerBlock[i] * blocks;
                accumulatedPerShare = accumulatedPerShare + (unaccountedReward * pool.accuracy[i]) / pool.poolSupply;
            }

            uint256 rewardsDebts = 0;
            if (i < user.rewardsDebts.length) {
                rewardsDebts = user.rewardsDebts[i];
            }

            amounts[i] = (user.shares * accumulatedPerShare) / pool.accuracy[i] - rewardsDebts;
        }
    }

    /// @notice Check if pool exists.
    /// @param _pid Pool's id.
    /// @return true if pool exists.
    function poolExist(uint256 _pid) public view returns (bool) {
        return poolInfo[_pid].assetToken.length != 0;
    }

    /// @notice Check the user's staked amount in the pool.
    /// @param _pid Pool's id.
    /// @param _user Address to check.
    /// @return Staked amount in all asset tokens.
    function userPoolAmount(uint256 _pid, address _user) public view returns (uint256) {    
        UserInfo memory user = userInfo[_pid][_user];
        return user.depositInWant;
    }

    /// @notice Check the user's staked amount in the pool in usd.
    /// @param _pid Pool's id.
    /// @param _user Address to check.
    /// @return Staked amounts for each asset token in usd.
    function userPoolAmountInUsd(uint256 _pid, address _user) public view returns (uint256[] memory) {
        PoolInfo memory pool = poolInfo[_pid];
        IImpulseMultiStrategyQuick strategy = IImpulseMultiStrategyQuick(pool.strategy);
        UserInfo memory user = userInfo[_pid][_user];

        uint256[] memory userTotalAmounts = new uint256[](3);
        for (uint256 i = 0; i < 3; i++) {
            userTotalAmounts[i] = ((user.shares * strategy.wantLockedTotalForEach()[i]) / strategy.sharesTotal());
        }
        return strategy.wantPriceInUsd(userTotalAmounts);
    }

    /// @notice Returns yield balance for the user in Cluster tokens.
    /// @param _pid Cluster staking pool ID.
    function yieldBalance(uint256 _pid, address _user) external view virtual returns (uint256) {
        PoolInfo memory pool = poolInfo[_pid];
        IImpulseMultiStrategyQuick strategy = IImpulseMultiStrategyQuick(pool.strategy);
        if (strategy.sharesTotal() == 0) {
            return 0;
        }
        UserInfo memory user = userInfo[_pid][_user];
        return ((user.shares * strategy.wantLockedTotal()) / strategy.sharesTotal()) - user.depositInWant;
    }

    ///@notice Get asset tokens in the pool.
    ///@param _pid Pool's id.
    function getAssetTokens(uint256 _pid) external view returns (address[] memory) {
        return poolInfo[_pid].assetToken;
    }

    /**********
     * INTERNAL HELPERS
     **********/

    function _claimRewards(uint256 _pid, address _user) internal {
        updatePool(_pid);
        PoolInfo memory pool = poolInfo[_pid];
        UserInfo storage user = userInfo[_pid][_user];

        uint256[] memory amounts = new uint256[](pool.rewardsTokens.length);
        for (uint256 i = 0; i < pool.rewardsTokens.length; i++) {
            amounts[i] = _updateUserInfo(pool, user, i, user.shares);
        }
        emit ClaimRewards(_user, _pid, pool.rewardsTokens, amounts);
    }
}
